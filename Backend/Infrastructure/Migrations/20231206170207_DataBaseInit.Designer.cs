// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TDbContext))]
    [Migration("20231206170207_DataBaseInit")]
    partial class DataBaseInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actif")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateDeNaissance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationalite")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Core.Models.Dossier", b =>
                {
                    b.Property<int>("DossierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actif")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateArrivee")
                        .HasColumnType("TEXT");

                    b.Property<int>("DureeSejourJours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lieu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroVol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductHotelProduitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeVoyageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DossierId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductHotelProduitId");

                    b.HasIndex("TypeVoyageId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("Core.Models.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actif")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Fabricant")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Prix")
                        .HasColumnType("TEXT");

                    b.HasKey("ProduitId");

                    b.ToTable("Produits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Produit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Models.TypeVoyage", b =>
                {
                    b.Property<int>("TypeVoyageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Actif")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TypeVoyageId");

                    b.ToTable("TypeVoyages");
                });

            modelBuilder.Entity("Core.Models.Hotel", b =>
                {
                    b.HasBaseType("Core.Models.Produit");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NombreEtoiles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Hotel");
                });

            modelBuilder.Entity("Core.Models.Dossier", b =>
                {
                    b.HasOne("Core.Models.Client", "Client")
                        .WithMany("Dossiers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Hotel", "ProductHotel")
                        .WithMany("Dossiers")
                        .HasForeignKey("ProductHotelProduitId");

                    b.HasOne("Core.Models.TypeVoyage", "TypeVoyage")
                        .WithMany("Dossiers")
                        .HasForeignKey("TypeVoyageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProductHotel");

                    b.Navigation("TypeVoyage");
                });

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("Core.Models.TypeVoyage", b =>
                {
                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("Core.Models.Hotel", b =>
                {
                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
